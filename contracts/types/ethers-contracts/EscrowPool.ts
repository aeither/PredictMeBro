/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace EscrowPool {
      
    export type PoolStruct = {creatorName: string, price: BigNumberish, poolPrize: BigNumberish, poolBalance: BigNumberish, startTime: BigNumberish, endTime: BigNumberish, isActive: boolean, creator: AddressLike, walrusHash: string, isResolved: boolean, winningVote: boolean, totalWinners: BigNumberish, totalWinnerAmount: BigNumberish, claimedAmount: BigNumberish}

    export type PoolStructOutput = [creatorName: string, price: bigint, poolPrize: bigint, poolBalance: bigint, startTime: bigint, endTime: bigint, isActive: boolean, creator: string, walrusHash: string, isResolved: boolean, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint, claimedAmount: bigint] & {creatorName: string, price: bigint, poolPrize: bigint, poolBalance: bigint, startTime: bigint, endTime: bigint, isActive: boolean, creator: string, walrusHash: string, isResolved: boolean, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint, claimedAmount: bigint }
  

    export type ParticipantStruct = {participant: AddressLike, vote: boolean, amount: BigNumberish, timestamp: BigNumberish, hasClaimed: boolean}

    export type ParticipantStructOutput = [participant: string, vote: boolean, amount: bigint, timestamp: bigint, hasClaimed: boolean] & {participant: string, vote: boolean, amount: bigint, timestamp: bigint, hasClaimed: boolean }
  
    }

  export interface EscrowPoolInterface extends Interface {
    getFunction(nameOrSignature: "CREATOR_FEE_PERCENT" | "claimCreatorFee" | "claimReward" | "createPool" | "getClaimableAmount" | "getParticipantCount" | "getPoolInfo" | "getPoolParticipants" | "getPoolWalrusHash" | "getTotalPools" | "getVoteCounts" | "hasVoted" | "participantIndex" | "poolCounter" | "poolParticipants" | "pools" | "resolvePool" | "vote"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PoolCreated" | "PoolResolved" | "RewardClaimed" | "VoteCast"): EventFragment;

    encodeFunctionData(functionFragment: 'CREATOR_FEE_PERCENT', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimCreatorFee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'claimReward', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createPool', values: [string, BigNumberish, BigNumberish, BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'getClaimableAmount', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getParticipantCount', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPoolInfo', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getPoolParticipants', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPoolWalrusHash', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTotalPools', values?: undefined): string;
encodeFunctionData(functionFragment: 'getVoteCounts', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasVoted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'participantIndex', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'poolCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'poolParticipants', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'pools', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'resolvePool', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'vote', values: [BigNumberish, boolean]): string;

    decodeFunctionResult(functionFragment: 'CREATOR_FEE_PERCENT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimCreatorFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getClaimableAmount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getParticipantCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolParticipants', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolWalrusHash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalPools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVoteCounts', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'participantIndex', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'poolCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'poolParticipants', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'resolvePool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result;
  }

  
    export namespace PoolCreatedEvent {
      export type InputTuple = [poolId: BigNumberish, creatorName: string, price: BigNumberish, poolPrize: BigNumberish, startTime: BigNumberish, endTime: BigNumberish, creator: AddressLike];
      export type OutputTuple = [poolId: bigint, creatorName: string, price: bigint, poolPrize: bigint, startTime: bigint, endTime: bigint, creator: string];
      export interface OutputObject {poolId: bigint, creatorName: string, price: bigint, poolPrize: bigint, startTime: bigint, endTime: bigint, creator: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolResolvedEvent {
      export type InputTuple = [poolId: BigNumberish, winningVote: boolean, totalWinners: BigNumberish, totalWinnerAmount: BigNumberish];
      export type OutputTuple = [poolId: bigint, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint];
      export interface OutputObject {poolId: bigint, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardClaimedEvent {
      export type InputTuple = [poolId: BigNumberish, participant: AddressLike, amount: BigNumberish];
      export type OutputTuple = [poolId: bigint, participant: string, amount: bigint];
      export interface OutputObject {poolId: bigint, participant: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteCastEvent {
      export type InputTuple = [poolId: BigNumberish, participant: AddressLike, vote: boolean, amount: BigNumberish];
      export type OutputTuple = [poolId: bigint, participant: string, vote: boolean, amount: bigint];
      export interface OutputObject {poolId: bigint, participant: string, vote: boolean, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface EscrowPool extends BaseContract {
    
    connect(runner?: ContractRunner | null): EscrowPool;
    waitForDeployment(): Promise<this>;

    interface: EscrowPoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CREATOR_FEE_PERCENT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    claimCreatorFee: TypedContractMethod<
      [poolId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    claimReward: TypedContractMethod<
      [poolId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createPool: TypedContractMethod<
      [_creatorName: string, _price: BigNumberish, _startTime: BigNumberish, _endTime: BigNumberish, _walrusHash: string, ],
      [bigint],
      'payable'
    >
    

    
    getClaimableAmount: TypedContractMethod<
      [poolId: BigNumberish, participant: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getParticipantCount: TypedContractMethod<
      [poolId: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getPoolInfo: TypedContractMethod<
      [poolId: BigNumberish, participant: AddressLike, ],
      [[EscrowPool.PoolStructOutput, bigint, bigint, boolean] & {participantCount: bigint, claimableAmount: bigint, voted: boolean }],
      'view'
    >
    

    
    getPoolParticipants: TypedContractMethod<
      [poolId: BigNumberish, ],
      [EscrowPool.ParticipantStructOutput[]],
      'view'
    >
    

    
    getPoolWalrusHash: TypedContractMethod<
      [poolId: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getTotalPools: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getVoteCounts: TypedContractMethod<
      [poolId: BigNumberish, ],
      [[bigint, bigint] & {yesVotes: bigint, noVotes: bigint }],
      'view'
    >
    

    
    hasVoted: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    participantIndex: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    poolCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    poolParticipants: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [[string, boolean, bigint, bigint, boolean] & {participant: string, vote: boolean, amount: bigint, timestamp: bigint, hasClaimed: boolean }],
      'view'
    >
    

    
    pools: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, string, string, boolean, boolean, bigint, bigint, bigint] & {creatorName: string, price: bigint, poolPrize: bigint, poolBalance: bigint, startTime: bigint, endTime: bigint, isActive: boolean, creator: string, walrusHash: string, isResolved: boolean, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint, claimedAmount: bigint }],
      'view'
    >
    

    
    resolvePool: TypedContractMethod<
      [poolId: BigNumberish, _winningVote: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    vote: TypedContractMethod<
      [poolId: BigNumberish, _vote: boolean, ],
      [void],
      'payable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CREATOR_FEE_PERCENT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'claimCreatorFee'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimReward'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createPool'): TypedContractMethod<
      [_creatorName: string, _price: BigNumberish, _startTime: BigNumberish, _endTime: BigNumberish, _walrusHash: string, ],
      [bigint],
      'payable'
    >;
getFunction(nameOrSignature: 'getClaimableAmount'): TypedContractMethod<
      [poolId: BigNumberish, participant: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getParticipantCount'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolInfo'): TypedContractMethod<
      [poolId: BigNumberish, participant: AddressLike, ],
      [[EscrowPool.PoolStructOutput, bigint, bigint, boolean] & {participantCount: bigint, claimableAmount: bigint, voted: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolParticipants'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [EscrowPool.ParticipantStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolWalrusHash'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalPools'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVoteCounts'): TypedContractMethod<
      [poolId: BigNumberish, ],
      [[bigint, bigint] & {yesVotes: bigint, noVotes: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'hasVoted'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'participantIndex'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'poolCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'poolParticipants'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [[string, boolean, bigint, bigint, boolean] & {participant: string, vote: boolean, amount: bigint, timestamp: bigint, hasClaimed: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'pools'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, string, string, boolean, boolean, bigint, bigint, bigint] & {creatorName: string, price: bigint, poolPrize: bigint, poolBalance: bigint, startTime: bigint, endTime: bigint, isActive: boolean, creator: string, walrusHash: string, isResolved: boolean, winningVote: boolean, totalWinners: bigint, totalWinnerAmount: bigint, claimedAmount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'resolvePool'): TypedContractMethod<
      [poolId: BigNumberish, _winningVote: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'vote'): TypedContractMethod<
      [poolId: BigNumberish, _vote: boolean, ],
      [void],
      'payable'
    >;

    getEvent(key: 'PoolCreated'): TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
getEvent(key: 'PoolResolved'): TypedContractEvent<PoolResolvedEvent.InputTuple, PoolResolvedEvent.OutputTuple, PoolResolvedEvent.OutputObject>;
getEvent(key: 'RewardClaimed'): TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
getEvent(key: 'VoteCast'): TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;

    filters: {
      
      'PoolCreated(uint256,string,uint256,uint256,uint256,uint256,address)': TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
      PoolCreated: TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
    

      'PoolResolved(uint256,bool,uint256,uint256)': TypedContractEvent<PoolResolvedEvent.InputTuple, PoolResolvedEvent.OutputTuple, PoolResolvedEvent.OutputObject>;
      PoolResolved: TypedContractEvent<PoolResolvedEvent.InputTuple, PoolResolvedEvent.OutputTuple, PoolResolvedEvent.OutputObject>;
    

      'RewardClaimed(uint256,address,uint256)': TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
      RewardClaimed: TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
    

      'VoteCast(uint256,address,bool,uint256)': TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
      VoteCast: TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
    
    };
  }